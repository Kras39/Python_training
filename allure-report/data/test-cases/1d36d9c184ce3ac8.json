{
  "uid" : "1d36d9c184ce3ac8",
  "name" : "test_add_contact_db[None:firstnamewcH9:lastnameI5]",
  "fullName" : "test.test_add_contact#test_add_contact_db",
  "historyId" : "2f8a0fa6748f7f231c79571451a02a9c",
  "time" : {
    "start" : 1651092971983,
    "stop" : 1651092971983,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'localhost' ([WinError 10061] Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение)\")",
  "statusTrace" : "self = <pymysql.connections.Connection object at 0x000001F211429880>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n>                           sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n\nenv\\lib\\site-packages\\pymysql\\connections.py:613: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('localhost', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\nC:\\Python39\\lib\\socket.py:844: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('localhost', 3306), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [WinError 10061] Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение\n\nC:\\Python39\\lib\\socket.py:832: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'db' for <Function test_add_contact_db[None:firstnameztgQ2j:lastnameGw1Pq]>>\n\n    @pytest.fixture(scope=\"session\")\n    def db(request):\n        db_config = load_config(request.config.getoption(\"--target\"))['db']\n>       dbfixture = DbFixture(host=db_config['host'], name=db_config['name'], user=db_config['user'], password=db_config['password'])\n\nconftest.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nfixture\\db.py:13: in __init__\n    self.connection = pymysql.connect(host=host, database=name, user=user, password=password, autocommit=True)\nenv\\lib\\site-packages\\pymysql\\connections.py:353: in __init__\n    self.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x000001F211429880>, sock = None\n\n    def connect(self, sock=None):\n        self._closed = False\n        try:\n            if sock is None:\n                if self.unix_socket:\n                    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                    sock.settimeout(self.connect_timeout)\n                    sock.connect(self.unix_socket)\n                    self.host_info = \"Localhost via UNIX socket\"\n                    self._secure = True\n                    if DEBUG:\n                        print(\"connected using unix_socket\")\n                else:\n                    kwargs = {}\n                    if self.bind_address is not None:\n                        kwargs[\"source_address\"] = (self.bind_address, 0)\n                    while True:\n                        try:\n                            sock = socket.create_connection(\n                                (self.host, self.port), self.connect_timeout, **kwargs\n                            )\n                            break\n                        except (OSError, IOError) as e:\n                            if e.errno == errno.EINTR:\n                                continue\n                            raise\n                    self.host_info = \"socket %s:%d\" % (self.host, self.port)\n                    if DEBUG:\n                        print(\"connected using socket\")\n                    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                sock.settimeout(None)\n    \n            self._sock = sock\n            self._rfile = sock.makefile(\"rb\")\n            self._next_seq_id = 0\n    \n            self._get_server_information()\n            self._request_authentication()\n    \n            if self.sql_mode is not None:\n                c = self.cursor()\n                c.execute(\"SET sql_mode=%s\", (self.sql_mode,))\n    \n            if self.init_command is not None:\n                c = self.cursor()\n                c.execute(self.init_command)\n                c.close()\n                self.commit()\n    \n            if self.autocommit_mode is not None:\n                self.autocommit(self.autocommit_mode)\n        except BaseException as e:\n            self._rfile = None\n            if sock is not None:\n                try:\n                    sock.close()\n                except:  # noqa\n                    pass\n    \n            if isinstance(e, (OSError, IOError, socket.error)):\n                exc = err.OperationalError(\n                    2003, \"Can't connect to MySQL server on %r (%s)\" % (self.host, e)\n                )\n                # Keep original exception and traceback to investigate error.\n                exc.original_exception = e\n                exc.traceback = traceback.format_exc()\n                if DEBUG:\n                    print(exc.traceback)\n>               raise exc\nE               pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'localhost' ([WinError 10061] Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение)\")\n\nenv\\lib\\site-packages\\pymysql\\connections.py:664: OperationalError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "stop",
    "time" : {
      "start" : 1651092916661,
      "stop" : 1651092916661,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "db",
    "time" : {
      "start" : 1651092969684,
      "stop" : 1651092971701,
      "duration" : 2017
    },
    "status" : "broken",
    "statusMessage" : "pymysql.err.OperationalError: (2003, \"Can't connect to MySQL server on 'localhost' ([WinError 10061] Подключение не установлено, т.к. конечный компьютер отверг запрос на подключение)\")\n",
    "statusTrace" : "  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\_pytest\\fixtures.py\", line 1111, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\_pytest\\fixtures.py\", line 890, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\conftest.py\", line 40, in db\n    dbfixture = DbFixture(host=db_config['host'], name=db_config['name'], user=db_config['user'], password=db_config['password'])\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\fixture\\db.py\", line 13, in __init__\n    self.connection = pymysql.connect(host=host, database=name, user=user, password=password, autocommit=True)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\pymysql\\connections.py\", line 353, in __init__\n    self.connect()\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\pymysql\\connections.py\", line 664, in connect\n    raise exc\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  } ],
  "afterStages" : [ {
    "name" : "stop::fin",
    "time" : {
      "start" : 1651092972464,
      "stop" : 1651092972505,
      "duration" : 41
    },
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.InvalidSessionIdException: Message: Tried to run command without establishing a connection\n\n",
    "statusTrace" : "  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\allure_commons\\_allure.py\", line 200, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\conftest.py\", line 57, in fin\n    fixture.session.ensure_logout()\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\fixture\\session.py\", line 25, in ensure_logout\n    if self.is_logget_in():\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\fixture\\session.py\", line 30, in is_logget_in\n    return len(wd.find_elements_by_link_text(\"Logout\")) > 0\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 592, in find_elements_by_link_text\n    return self.find_elements(by=By.LINK_TEXT, value=text)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1283, in find_elements\n    return self.execute(Command.FIND_ELEMENTS, {\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Admin\\PycharmProjects\\Python_training\\env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_add_contact"
  }, {
    "name" : "host",
    "value" : "DESKTOP-AFDT43T"
  }, {
    "name" : "thread",
    "value" : "10160-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_add_contact"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "json_contact",
    "value" : "None:firstnamewcH9:lastnameI5"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "1d36d9c184ce3ac8.json",
  "parameterValues" : [ "None:firstnamewcH9:lastnameI5" ]
}